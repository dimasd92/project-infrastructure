---
Parameters:

  SSHKeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: String
    Default: demo

  InstanceType:
    Type: String
    Description: Enter one of the possible instance type for instance
  #  Default: t2.micro
#    AllowedValues:
#      - t2.micro
#      - t2.large
#      - m4.large
#      - m4.xlarge
#      - c4.large

  AutoScalingMinCapacity:
    Description: AutoScaling group minimum capacity
    Type: Number

  AutoScalingMaxCapacity:
    Description: AutoScaling group minimum capacity
    Type: Number

  AutoScalingDesiredCapacity:
    Description: Desired count of AutoScaling group capacity
    Type: Number

  ContainerImage:
    Description: Container image
    Type: String
    Default: 069312102029.dkr.ecr.us-west-2.amazonaws.com/petclinic:latest

  ContainerCPU:
    Description: Container CPU reservation
    Type: Number
    Default: 256

  ContainerMemory:
    Description: Container memory reservation
    Type: Number
    Default: 384

  ContainerMinCapacity:
    Description: Container minimum capacity
    Type: Number
    Default: 4

  ContainerMaxCapacity:
    Description: Container maximum capacity
    Type: Number
    Default: 12

  ContainerDesiredCount:
    Description: Container desired count
    Type: Number
    Default: 6

#  DBName:
#    Default: project
#    Description: The database name
#    Type: String
#    MinLength: '1'
#    MaxLength: '64'
#    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
#    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '6'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

Mappings:
  AWSRegionToAMI:
    ap-northeast-1:
      AMI: ami-0d5f884dada5562c6
    ap-northeast-2:
      AMI: ami-0060ad36f655af38b
    ap-south-1:
      AMI: ami-056a07eb5b1d13734
    ap-southeast-1:
      AMI: ami-065c0bd2832a70f9d
    ap-southeast-2:
      AMI: ami-0aa8b7a8042811ddf
    ca-central-1:
      AMI: ami-0d50dee936e241e7e
    eu-central-1:
      AMI: ami-03804565a6baf6d30
    eu-west-1:
      AMI: ami-0dbcd2533bc72c3f6
    eu-west-2:
      AMI: ami-005307409c5f6e76c
    eu-west-3:
      AMI: ami-024c0b7d07abc6526
    sa-east-1:
      AMI: ami-0078e33a9103e1e58
    us-east-1:
      AMI: ami-0254e5972ebcd132c
    us-east-2:
      AMI: ami-0a0d2004b44b9287c
    us-gov-west-1:
      AMI: ami-a842dcc9
    us-west-1:
      AMI: ami-0de5608ca20c07aa2
    us-west-2:
      AMI: ami-0302f3ec240b9d23c

AWSTemplateFormatVersion: '2010-09-09'
Resources:
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint', ########################3
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',       ################33
              'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents', 'ecr:*']   ##########################
            Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: EC2Role

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      SecurityGroups:
      - Fn::ImportValue: PrivateSubnetSecurityGroup
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      AssociatePublicIpAddress: true
      KeyName: !Ref SSHKeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECScluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ASG --region ${AWS::Region}
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          /usr/bin/enable-ec2-spot-hibernation
          sudo yum install -y awslogs
          sudo systemctl start awslogsd
          sudo systemctl enable awslogsd.service

          cat > /etc/awslogs/awscli.conf << EOF
          [default]
          region = ${AWS::Region}
          [plugins]
          cwlogs = cwlogs
          EOF

          cat > /etc/awslogs/awslogs.conf << EOF
          [general]
          state_file = /var/lib/awslogs/agent-state

          [/var/log/dmesg]
          file = /var/log/dmesg
          log_stream_name = {instance_id}/var/log/dmesg
          log_group_name = ${ECScluster}

          [/var/log/messages]
          datetime_format = %b %d %H:%M:%S
          file = /var/log/messages
          log_stream_name = {instance_id}/var/log/messages
          log_group_name = ${ECScluster}

          [/var/log/cloud-init.log]
          datetime_format = %b %d %H:%M:%S
          file = /var/log/cloud-init.log
          log_stream_name = {instance_id}/var/log/cloud-init.log
          log_group_name = ${ECScluster}

          [/var/log/cfn-init.log]
          datetime_format = %Y-%m-%d %H:%M:%S
          file = /var/log/cfn-init.log
          log_stream_name = {instance_id}/var/log/cfn-init.log
          log_group_name = ${ECScluster}
          EOF

          #restart cloudwatch agent
          sudo systemctl restart awslogsd


  InstanceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7


  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: "PT12M5S"
        WaitOnResourceSignals: true
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: SubnetPrivateA
      - Fn::ImportValue: SubnetPrivateB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: !Ref AutoScalingMaxCapacity
      MinSize: !Ref AutoScalingMinCapacity
      DesiredCapacity: !Ref AutoScalingDesiredCapacity
      Cooldown: "100"
      TargetGroupARNs:
      - Fn::ImportValue: TargetGroup
      MetricsCollection:
        -
          Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      Tags:
      - Key: Name
        Value: Project
        PropagateAtLaunch: true


  AmazonEC2ContainerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - ec2:Describe*
            - ec2:AuthorizeSecurityGroupIngress
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:RegisterTargets
            Resource: "*"

  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ["sts:AssumeRole"]
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ["application-autoscaling:*", "cloudwatch:DescribeAlarms", "cloudwatch:PutMetricAlarm",
              "ecs:DescribeServices", "ecs:UpdateService"]
            Resource: "*"

  ECScluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Project

  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: bridge
      ContainerDefinitions:
        - Name: petclinic
          Image: !Ref ContainerImage
          Cpu: !Ref ContainerCPU
          PortMappings:
            - ContainerPort: 8080
          Memory: !Ref ContainerMemory
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
          Environment:
            - Name: SPRING_PROFILES_ACTIVE
              Value: mysql
            - Name: JDBC_DATABASE_URL
              Value:
                Fn::ImportValue: JDBCConnectionString
            - Name: JDBC_DATABASE_USERNAME
              Value: !Ref DBUser
            - Name: JDBC_DATABASE_PASSWORD
              Value: !Ref DBPassword

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365


  service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECScluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref ContainerDesiredCount
      LoadBalancers:
        - ContainerName: petclinic
          ContainerPort: 8080
          TargetGroupArn:
            Fn::ImportValue: TargetGroup
      TaskDefinition: !Ref taskdefinition
      HealthCheckGracePeriodSeconds: 60
      ServiceName: petclinic
      Role: !Ref AmazonEC2ContainerServiceRole

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref ContainerMaxCapacity
      MinCapacity: !Ref ContainerMinCapacity
      ResourceId: !Join ["/", [service, !Ref "ECScluster", !GetAtt [service, Name]]]
      RoleARN: !GetAtt [ ECSAutoScalingRole, Arn ]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

#############CloudWatch
  SimpleScalingUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: "ChangeInCapacity"
      PolicyType: "SimpleScaling"
      Cooldown: "300"
      AutoScalingGroupName:
        Ref: ASG
      ScalingAdjustment: 1

  MemoryReservationHighAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 5
      Statistic: Maximum
      Threshold: 80
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: 60
      AlarmActions:
      - Ref: SimpleScalingUp
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value:
          Fn::ImportValue: ECScluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: MemoryReservation

  SimpleScalingDown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: "ChangeInCapacity"
      PolicyType: "SimpleScaling"
      Cooldown: "300"
      AutoScalingGroupName:
        Ref: ASG
      ScalingAdjustment: -1

  MemoryReservationLowAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 5
      Statistic: Maximum
      Threshold: 35
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: 60
      AlarmActions:
      - Ref: SimpleScalingDown
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value:
          Fn::ImportValue: ECScluster
      ComparisonOperator: LessThanThreshold
      MetricName: MemoryReservation

  RequestHighAlert1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 5
      Statistic: Sum
      Threshold: 10
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: 60
      AlarmActions:
      - Ref: AutoScaling
      OKActions:
      - Ref: AutoScaling
      Namespace: AWS/ApplicationELB
      Dimensions:
      - Name: LoadBalancer
        Value:
          Fn::ImportValue: LoadBalancerFullName
      ComparisonOperator: LessThanThreshold
      MetricName: RequestCount

  RequestHighAlert2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 5
      Statistic: Sum
      Threshold: 100
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: 60
      AlarmActions:
      - Ref: AutoScaling
      OKActions:
      - Ref: AutoScaling
      Namespace: AWS/ApplicationELB
      Dimensions:
      - Name: LoadBalancer
        Value:
          Fn::ImportValue: LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold
      MetricName: RequestCount

  AutoScaling:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScalingUp
      PolicyType: StepScaling
      ScalingTargetId:
        Fn::ImportValue: ScalableTarget
#      ScalableDimension: ecs:service:DesiredCount
#      ServiceNamespace: ecs
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 180
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 10
            ScalingAdjustment: -1
          - MetricIntervalLowerBound: 10
            MetricIntervalUpperBound: 100
            ScalingAdjustment: 0
          - MetricIntervalLowerBound: 100
            ScalingAdjustment: 2
########

Outputs:
  ECScluster:
    Value: !Ref ECScluster
    Export:
      Name: ECScluster
  ScalableTarget:
    Value: !Ref ScalableTarget
    Export:
      Name: ScalableTarget

  ASG:
    Value: !Ref ASG
    Export:
      Name: ASG
