---
Parameters:

  SSHKeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: String
    Default: demo

  InstanceType:
    Type: String
    Description: Enter one of the possible instance type for instance
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.large
      - m4.large
      - m4.xlarge
      - c4.large

  AutoScalingMinCapacity:
    Description: AutoScaling group minimum capacity
    Type: Number

  AutoScalingMaxCapacity:
    Description: AutoScaling group minimum capacity
    Type: Number

  AutoScalingDesiredCapacity:
    Description: Desired count of AutoScaling group capacity
    Type: Number

  ContainerImage:
    Description: Container image
    Type: String
    Default: 069312102029.dkr.ecr.us-west-1.amazonaws.com/petclinic:latest

  ContainerCPU:
    Description: Container CPU reservation
    Type: Number
    Default: 256

  ContainerMemory:
    Description: Container memory reservation
    Type: Number
    Default: 384

  ContainerMinCapacity:
    Description: Container minimum capacity
    Type: Number
    Default: 4

  ContainerMaxCapacity:
    Description: Container maximum capacity
    Type: Number
    Default: 12

  ContainerDesiredCount:
    Description: Container desired count
    Type: Number
    Default: 6

  DBUser:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '6'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

Mappings:
  AWSRegionToAMI:
    ap-northeast-1:
      AMI: ami-0d5f884dada5562c6
    ap-northeast-2:
      AMI: ami-0060ad36f655af38b
    ap-south-1:
      AMI: ami-056a07eb5b1d13734
    ap-southeast-1:
      AMI: ami-065c0bd2832a70f9d
    ap-southeast-2:
      AMI: ami-0aa8b7a8042811ddf
    ca-central-1:
      AMI: ami-0d50dee936e241e7e
    eu-central-1:
      AMI: ami-03804565a6baf6d30
    eu-west-1:
      AMI: ami-0dbcd2533bc72c3f6
    eu-west-2:
      AMI: ami-005307409c5f6e76c
    eu-west-3:
      AMI: ami-024c0b7d07abc6526
    sa-east-1:
      AMI: ami-0078e33a9103e1e58
    us-east-1:
      AMI: ami-0254e5972ebcd132c
    us-east-2:
      AMI: ami-0a0d2004b44b9287c
    us-gov-west-1:
      AMI: ami-a842dcc9
    us-west-1:
      AMI: ami-0de5608ca20c07aa2
    us-west-2:
      AMI: ami-0302f3ec240b9d23c

AWSTemplateFormatVersion: '2010-09-09'
Resources:
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents', 'logs:DescribeLogStreams', 'ecr:BatchCheckLayerAvailability', 'ecr:BatchGetImage', 'ecr:GetDownloadUrlForLayer', 'ecr:GetAuthorizationToken']
            Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: EC2Role

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      SecurityGroups:
      - Fn::ImportValue: PrivateSubnetSecurityGroup
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      AssociatePublicIpAddress: true
      KeyName: !Ref SSHKeyName
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          yum install -y aws-cfn-bootstrap hibagent
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ASG
          /usr/bin/enable-ec2-spot-hibernation

    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              collectd: []

          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${ECScluster} >> /etc/ecs/ecs.config
            02_enable_cloudwatch_agent:
              command: !Sub /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c ssm:${ECSCloudWatchParameter} -s
          files:
            /etc/cfn/cfn-hup.conf:
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ECSLaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  # This IAM Role is attached to all of the ECS hosts. It is based on the default role
  # published here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance_IAM_role.html
  #
  # You can add other IAM policy statements here to allow access from your ECS hosts
  # to other AWS services. Please note that this role will be used by ALL containers
  # running on the ECS host.

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub EnvironmentName-ECSRole-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Action": "sts:AssumeRole",
                "Effect": "Allow",
                "Principal": {
                    "Service": "ec2.amazonaws.com"
                }
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: |
            {
                "Statement": [{
                    "Effect": "Allow",
                    "Action": [
                        "ecs:CreateCluster",
                        "ecs:DeregisterContainerInstance",
                        "ecs:DiscoverPollEndpoint",
                        "ecs:Poll",
                        "ecs:RegisterContainerInstance",
                        "ecs:StartTelemetrySession",
                        "ecs:Submit*",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:BatchGetImage",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:GetAuthorizationToken"
                    ],
                    "Resource": "*"
                }]
            }
  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Action:
            - "sts:AssumeRole"
          Effect: Allow
          Principal:
            Service:
              - application-autoscaling.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - application-autoscaling:*
                - cloudwatch:DescribeAlarms
                - cloudwatch:PutMetricAlarm
                - ecs:DescribeServices
                - ecs:UpdateService
              Resource: "*"

  ECSCloudWatchParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: ECS
      Name: !Sub "AmazonCloudWatch-${ECScluster}-ECS"
      Type: String
      Value: !Sub |
        {
          "logs": {
            "force_flush_interval": 5,
            "logs_collected": {
              "files": {
                "collect_list": [
                  {
                    "file_path": "/var/log/messages",
                    "log_group_name": "${ECScluster}-/var/log/messages",
                    "log_stream_name": "{instance_id}",
                    "timestamp_format": "%b %d %H:%M:%S"
                  },
                  {
                    "file_path": "/var/log/dmesg",
                    "log_group_name": "${ECScluster}-/var/log/dmesg",
                    "log_stream_name": "{instance_id}"
                  },
                  {
                    "file_path": "/var/log/docker",
                    "log_group_name": "${ECScluster}-/var/log/docker",
                    "log_stream_name": "{instance_id}",
                    "timestamp_format": "%Y-%m-%dT%H:%M:%S.%f"
                  },
                  {
                    "file_path": "/var/log/ecs/ecs-init.log",
                    "log_group_name": "${ECScluster}-/var/log/ecs/ecs-init.log",
                    "log_stream_name": "{instance_id}",
                    "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                  },
                  {
                    "file_path": "/var/log/ecs/ecs-agent.log.*",
                    "log_group_name": "${ECScluster}-/var/log/ecs/ecs-agent.log",
                    "log_stream_name": "{instance_id}",
                    "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                  },
                  {
                    "file_path": "/var/log/ecs/audit.log",
                    "log_group_name": "${ECScluster}-/var/log/ecs/audit.log",
                    "log_stream_name": "{instance_id}",
                    "timestamp_format": "%Y-%m-%dT%H:%M:%SZ"
                  }
                ]
              }
            }
          },
          "metrics": {
            "append_dimensions": {
              "AutoScalingGroupName": "${!aws:AutoScalingGroupName}",
              "InstanceId": "${!aws:InstanceId}",
              "InstanceType": "${!aws:InstanceType}"
            },
            "metrics_collected": {
              "collectd": {
                "metrics_aggregation_interval": 60
              },
              "disk": {
                "measurement": [
                  "used_percent"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "/"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              },
              "statsd": {
                "metrics_aggregation_interval": 60,
                "metrics_collection_interval": 10,
                "service_address": ":8125"
              }
            }
          }
        }

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: "PT12M5S"
        WaitOnResourceSignals: true
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: SubnetPrivateA
      - Fn::ImportValue: SubnetPrivateB
      LaunchConfigurationName: !Ref LaunchConfiguration
      MaxSize: !Ref AutoScalingMaxCapacity
      MinSize: !Ref AutoScalingMinCapacity
      DesiredCapacity: !Ref AutoScalingDesiredCapacity
      Cooldown: "100"
      TargetGroupARNs:
      - Fn::ImportValue: TargetGroup
      MetricsCollection:
        -
          Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      Tags:
      - Key: Name
        Value: Project
        PropagateAtLaunch: true


  AmazonEC2ContainerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - ec2:Describe*
            - ec2:AuthorizeSecurityGroupIngress
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:RegisterTargets
            Resource: "*"

  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ["sts:AssumeRole"]
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ["application-autoscaling:*", "cloudwatch:DescribeAlarms", "cloudwatch:PutMetricAlarm",
              "ecs:DescribeServices", "ecs:UpdateService"]
            Resource: "*"

  ECScluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Project

  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: bridge
      ContainerDefinitions:
        - Name: petclinic
          Image: !Ref ContainerImage
          Cpu: !Ref ContainerCPU
          PortMappings:
            - ContainerPort: 8080
          Memory: !Ref ContainerMemory
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudWatchLogsGroup
              awslogs-region: !Ref AWS::Region
          Environment:
            - Name: SPRING_PROFILES_ACTIVE
              Value: mysql
            - Name: JDBC_DATABASE_URL
              Value:
                Fn::ImportValue: JDBCConnectionString
            - Name: JDBC_DATABASE_USERNAME
              Value: !Ref DBUser
            - Name: JDBC_DATABASE_PASSWORD
              Value: !Ref DBPassword

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365


  service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECScluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref ContainerDesiredCount
      LoadBalancers:
        - ContainerName: petclinic
          ContainerPort: 8080
          TargetGroupArn:
            Fn::ImportValue: TargetGroup
      TaskDefinition: !Ref taskdefinition
      HealthCheckGracePeriodSeconds: 60
      ServiceName: petclinic
      Role: !Ref AmazonEC2ContainerServiceRole

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref ContainerMaxCapacity
      MinCapacity: !Ref ContainerMinCapacity
      ResourceId: !Join ["/", [service, !Ref "ECScluster", !GetAtt [service, Name]]]
      RoleARN: !GetAtt [ ECSAutoScalingRole, Arn ]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

#############CloudWatch
  SimpleScalingUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: "ChangeInCapacity"
      PolicyType: "SimpleScaling"
      Cooldown: "300"
      AutoScalingGroupName:
        Ref: ASG
      ScalingAdjustment: 1

  MemoryReservationHighAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 5
      Statistic: Maximum
      Threshold: 80
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: 60
      AlarmActions:
      - Ref: SimpleScalingUp
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value:
          Fn::ImportValue: ECScluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: MemoryReservation

  SimpleScalingDown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: "ChangeInCapacity"
      PolicyType: "SimpleScaling"
      Cooldown: "300"
      AutoScalingGroupName:
        Ref: ASG
      ScalingAdjustment: -1

  MemoryReservationLowAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 5
      Statistic: Maximum
      Threshold: 35
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: 60
      AlarmActions:
      - Ref: SimpleScalingDown
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value:
          Fn::ImportValue: ECScluster
      ComparisonOperator: LessThanThreshold
      MetricName: MemoryReservation

  RequestHighAlert1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 5
      Statistic: Sum
      Threshold: 10
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: 60
      AlarmActions:
      - Ref: AutoScaling
      OKActions:
      - Ref: AutoScaling
      Namespace: AWS/ApplicationELB
      Dimensions:
      - Name: LoadBalancer
        Value:
          Fn::ImportValue: LoadBalancerFullName
      ComparisonOperator: LessThanThreshold
      MetricName: RequestCount

  RequestHighAlert2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 5
      Statistic: Sum
      Threshold: 100
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: 60
      AlarmActions:
      - Ref: AutoScaling
      OKActions:
      - Ref: AutoScaling
      Namespace: AWS/ApplicationELB
      Dimensions:
      - Name: LoadBalancer
        Value:
          Fn::ImportValue: LoadBalancerFullName
      ComparisonOperator: GreaterThanThreshold
      MetricName: RequestCount

  AutoScaling:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScalingUp
      PolicyType: StepScaling
      ScalingTargetId:
        Fn::ImportValue: ScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 180
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 10
            ScalingAdjustment: -1
          - MetricIntervalLowerBound: 10
            MetricIntervalUpperBound: 100
            ScalingAdjustment: 0
          - MetricIntervalLowerBound: 100
            ScalingAdjustment: 2
########

Outputs:
  ECScluster:
    Value: !Ref ECScluster
    Export:
      Name: ECScluster
  ScalableTarget:
    Value: !Ref ScalableTarget
    Export:
      Name: ScalableTarget

  ASG:
    Value: !Ref ASG
    Export:
      Name: ASG
