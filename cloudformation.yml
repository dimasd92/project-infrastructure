---
Parameters:
  SSHKeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: String
    Default: demo

AWSTemplateFormatVersion: '2010-09-09'
Resources:

   ###   VPC   ###
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: Project
#####################################################
  ###   Subnet1   ###
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "us-west-2a"
      Tags:
      - Key: Name
        Value: Private 1
#####################################################
    ###   Subnet2   ###
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: "us-west-2b"
      Tags:
      - Key: Name
        Value: Private 2
#####################################################
    ###   InternetGateway   ###
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: Project

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId:
        Ref: InternetGateway
#####################################################
    ###   Route Table   ###
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private subnet

  Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
      RouteTableId:
        Ref: RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  SubnetPublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId:
        Ref: RouteTable
  SubnetPublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId:
        Ref: RouteTable
#####################################################
    ###   SecurityGroup   ###
  PrivateNetworkSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for private network
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 31000
        ToPort: 61000
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Private network

    ###   SecurityGroup   ###
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Load Balancer
########################################################
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0302f3ec240b9d23c  ####### ami-061392db613a6357b
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECScluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ASG --region ${AWS::Region}
      SecurityGroups:
      - Ref: PrivateNetworkSecurityGroup
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2InstanceProfile
      AssociatePublicIpAddress: true
      KeyName: !Ref SSHKeyName

#####################################################
  ASG:
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'
      AutoScalingRollingUpdate:
        MinInstancesInService: "1"
        MaxBatchSize: "1"
        PauseTime: "PT12M5S"
        WaitOnResourceSignals: "true"
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: InternetGateway
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT15M
    Properties:
      AvailabilityZones: #################################????????????????
        Fn::GetAZs: us-west-2a
      VPCZoneIdentifier:
      - Ref: Subnet1
      - Ref: Subnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: "3"
      MinSize: "1"
      DesiredCapacity: "1"
      Cooldown: "60"
      TargetGroupARNs:
      - Ref: TargetGroup
      MetricsCollection:
        -
          Granularity: "1Minute"
          Metrics:
            - "GroupMinSize"
            - "GroupMaxSize"
      Tags:
      - Key: Name
        Value: Project
        PropagateAtLaunch: true

#####################################################
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - Ref: Subnet1
      - Ref: Subnet2
      SecurityGroups:
        - Ref: LBSecurityGroup
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '30'
      Tags:
        - Key: Name
          Value: LoadBalancer

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: Project
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  ECSALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: LoadBalancerListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'TargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'LoadBalancerListener'
      Priority: 1

####################################################

  ECScluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Project

  taskdefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: bridge
      ContainerDefinitions:
        - Name: petclinic
          Image: 069312102029.dkr.ecr.us-west-2.amazonaws.com/petclinic:latest
          Cpu: '256'
          PortMappings:
            - ContainerPort: 8080
#              HostPort: 8080
          Memory: '256'
          Essential: 'true'

  service:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      Cluster: !Ref ECScluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 3
      LoadBalancers:
        - ContainerName: petclinic
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
      TaskDefinition: !Ref taskdefinition
      ServiceName: petclinic
      Role: !Ref Role

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 12
      MinCapacity: 1
      ResourceId: !Join ["/", [service, !Ref "ECScluster", !GetAtt [service, Name]]]
      RoleARN: !GetAtt [ AutoScalingRole, Arn ]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs


  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2008-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - elasticloadbalancing:Describe*
            - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
            - elasticloadbalancing:RegisterInstancesWithLoadBalancer
            - ec2:Describe*
            - ec2:AuthorizeSecurityGroupIngress
            - elasticloadbalancing:DeregisterTargets
            - elasticloadbalancing:RegisterTargets
            Resource: "*"

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ["sts:AssumeRole"]
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ["application-autoscaling:*", "cloudwatch:DescribeAlarms", "cloudwatch:PutMetricAlarm",
              "ecs:DescribeServices", "ecs:UpdateService"]
            Resource: "*"

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents', 'ecr:*']
            Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - Ref: EC2Role

#######################################################

#  ALB500sAlarmScaleUp:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      EvaluationPeriods: '1'
#      Statistic: Average
#      Threshold: '10'
#      AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
#      Period: '60'
#      AlarmActions: [!Ref 'ServiceScalingPolicy']
#      Namespace: AWS/ApplicationELB
#      Dimensions:
#        - Name: LoadBalancer
#          Value: !GetAtt
#            - LoadBalancer
#            - LoadBalancerFullName
#      ComparisonOperator: GreaterThanThreshold
#      MetricName: HTTPCode_ELB_5XX_Count

#  ServiceScalingPolicy:
#    Type: AWS::ApplicationAutoScaling::ScalingPolicy
#    Properties:
#      PolicyName: StepPolicy
#      PolicyType: StepScaling
#      ScalingTargetId: !Ref 'ScalableTarget'
#      StepScalingPolicyConfiguration:
#        AdjustmentType: ChangeInCapacity
#        Cooldown: 60
#        MetricAggregationType: Average
#        StepAdjustments:
#          -
#            MetricIntervalLowerBound: "0"
#            MetricIntervalUpperBound: "50"
#            ScalingAdjustment: "1"
#          -
#            MetricIntervalLowerBound: "50"
#            ScalingAdjustment: "2"


#  AutoScalingPolicy:
#    Type: AWS::ApplicationAutoScaling::ScalingPolicy
#    Properties:
#      PolicyName: ECSScalingBlogPolicy
#      PolicyType: StepScaling
#      ScalingTargetId:
#        Ref: ScalableTarget
#      ScalableDimension: ecs:service:DesiredCount
#      ServiceNamespace: ecs
#      StepScalingPolicyConfiguration:
#        AdjustmentType: ChangeInCapacity
#        Cooldown: 60
#        MetricAggregationType: Average
#        StepAdjustments:
#        - MetricIntervalLowerBound: 0
#          ScalingAdjustment: 2
#        - MetricIntervalUpperBound: 0
#          ScalingAdjustment: -1




#####################################################
  SimpleScalingUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: "ChangeInCapacity"
      PolicyType: "SimpleScaling"
      Cooldown: "60"
      AutoScalingGroupName:
        Ref: "ASG"
      ScalingAdjustment: 1

  MemoryReservationHighAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Maximum
      Threshold: 80
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
      - Ref: SimpleScalingUp
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECScluster
      ComparisonOperator: GreaterThanThreshold
      MetricName: MemoryReservation

  SimpleScalingDown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: "ChangeInCapacity"
      PolicyType: "SimpleScaling"
      Cooldown: "60"
      AutoScalingGroupName:
        Ref: "ASG"
      ScalingAdjustment: -1

  MemoryReservationLowAlert:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Maximum
      Threshold: 40
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
      - Ref: SimpleScalingDown
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECScluster
      ComparisonOperator: LessThanThreshold
      MetricName: MemoryReservation
###############################################################################

#  AutoScalingPolicy:
#    Type: AWS::ApplicationAutoScaling::ScalingPolicy
#    Properties:
#      PolicyName: ECSScalingBlogPolicy
#      PolicyType: StepScaling
#      ScalingTargetId:
#        Ref: AutoScalingTarget
#      ScalableDimension: ecs:service:DesiredCount
#      ServiceNamespace: ecs
#      StepScalingPolicyConfiguration:
#        AdjustmentType: ChangeInCapacity
#        Cooldown: 60
#        MetricAggregationType: Average
#        StepAdjustments:
#        - MetricIntervalLowerBound: 0
#          ScalingAdjustment: 2
#        - MetricIntervalUpperBound: 0
#          ScalingAdjustment: -1











#      Dimensions:
#      - Name: ClusterName
#        Value:
#          Ref: ECSCluster
#      ComparisonOperator: GreaterThanThreshold
#      MetricName: MemoryReservation





#  CPUReservationScaleUpPolicy:
#    Type: AWS::AutoScaling::ScalingPolicy
#    Properties:
#      AdjustmentType: ChangeInCapacity
#      AutoScalingGroupName: !Ref: ECSAutoScalingGroup
#      Cooldown: '300'
#      ScalingAdjustment: '1'
#
#  CPUReservationHighAlert:
#    Type: AWS::CloudWatch::Alarm
#    Properties:
#      EvaluationPeriods: '1'
#      Statistic: Maximum
#      Threshold: '80'
#      Period: '60'
#      AlarmActions:
#      - !Ref: CPUReservationScaleUpPolicy
#      Dimensions:
#      - Name: ClusterName
#        Value: !Ref: ECSCluster
#      ComparisonOperator: GreaterThanThreshold
#      MetricName: CPUReservation
#      Namespace: AWS/ECS










  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14


#Outputs:
#  LoadBalancer:
#    Description: A reference to the Application Load Balancer
#    Value: !Ref LoadBalancer
#
#  LoadBalancerUrl:
#    Description: The URL of the ALB
#    Value: !GetAtt LoadBalancer.DNSName
#
#  Listener:
#    Description: A reference to a port 80 listener
#    Value: !Ref LoadBalancerListener



##   CLOUD INIT ???????????????????????????


розділити ресурси (nested stack)
розділити ролі 1 - контейнер - ролі для логів.....2 - для таргет групи.......3 - роль для автоскелінг ролі
автоскелінг lifecicle rules

імена понаписувати!!!

Додати параметри!!!

Додаємо

tcp

3 групи ...... 1 лоад ....- 2 просто - 3 інстансів.....
